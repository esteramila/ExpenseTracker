@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject ExpenseService ExpenseService;
@inject CategoryService CategoryService

@* <h3>ExpenseForm</h3> *@

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form @onsubmit="HandleValidSubmit">
        <div class="form-group mt-3">
            <label for="title">Title</label>
            <input type="text" class="form-control" id="title" @bind="expense.Title" required />
        </div>
        <div class="form-group mt-3">
            <label for="date">Date</label>
            <input type="date" class="form-control" id="date" @bind="expense.Date" required />
        </div>
        <div class="form-group mt-3">
            <label for="amount">Amount</label>
            <input type="number" class="form-control" id="amount" step="0.01" @bind="expense.Amount" required />
        </div>
        <div class="form-group form-check mt-3">
            <label for="planned">Planned</label>
            <input type="checkbox" class="form-check-input" id="planned" @bind="expense.Planned" />
        </div>
        <div class="form-group mt-3">
            <label for="category">Category</label>
            <select id="category" class="form-control" @bind="expense.CategoryId" required>
                <option value="">Select a category</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-success mt-3">@SubmitButtonText</button>
    </form>
}

@code {
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public Expense expense { get; set; }

    [Parameter]
    public List<Category> categories { get; set; }

    private string SubmitButtonText => expense.Id == 0 ? "Add Expense" : "Save";

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync();
    }
}
