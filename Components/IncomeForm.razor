@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject ExpenseService ExpenseService;
@inject CategoryService CategoryService;
@inject IncomeService IncomeService;

@* <h3>IncomeForm</h3> *@

<form @onsubmit="HandleValidSubmit">
    <div class="form-group mt-3">
            <label for="title">Title</label>
        <input type="text" class="form-control" id="title" @bind="income.Title" required />
        </div>
    <div class="form-group mt-3">
            <label for="date">Date</label>
        <input type="date" class="form-control" id="date" @bind="income.Date" required />
        </div >
    <div class="form-group mt-3">
            <label for="amount">Amount</label>
        <input type="number" class="form-control" id="amount" step="0.01" @bind="income.Amount" required />
        </div>
    <div class="form-group mt-3">
        <label for="type">Type</label>
        <select class="form-control" id="type" @bind="income.Type" required>
            @foreach (var type in Enum.GetValues(typeof(IncomeType)))
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-success mt-3">@SubmitButtonText</button>
    </form>


@code {
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public Income income { get; set; }

    [Parameter]
    public List<Type> types { get; set; }

    private string SubmitButtonText => income.Id == 0 ? "Add Income" : "Save";

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync();
    }
}