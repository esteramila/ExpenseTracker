@page "/expenses/new"
@rendermode InteractiveServer
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject ExpenseService ExpenseService;
@inject CategoryService CategoryService
@inject NavigationManager NavigationManager;

<PageTitle>AddExpense</PageTitle>
<h3>AddExpense</h3>

<ExpenseForm expense="expense"
             categories="categories"
             OnValidSubmit="HandleValidSubmit" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private Expense expense = new Expense();
    private List<Category> categories;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Set the Date field to today's date
        expense.Date = DateTime.Today;
        // Fetch categories asynchronously
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Ensure the Date is set to UTC
            if (expense.Date.Kind == DateTimeKind.Unspecified)
            {
                expense.Date = DateTime.SpecifyKind(expense.Date, DateTimeKind.Utc);
            }
            else
            {
                expense.Date = expense.Date.ToUniversalTime();
            }
            await ExpenseService.AddExpenseAsync(expense);
            NavigationManager.NavigateTo("/expenses");
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            // Log the error message or show it in the UI
            Console.Error.WriteLine(errorMessage);
        }
    }

    private string GetInnermostExceptionMessage(Exception ex)
    {
        while (ex.InnerException != null) ex = ex.InnerException;
        return ex.Message;
    }
}

