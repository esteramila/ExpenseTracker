@page "/categories"
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject CategoryService Service;
@rendermode InteractiveServer

<PageTitle>Categories</PageTitle>
<h3>Categories</h3>

<div class="grid-container">
    <div class="bloc">
        <h5>Search Category by ID</h5>
        <form @onsubmit="SearchCategory">
            <input type="number" class="form-group" @bind="searchCategoryId" placeholder="Category ID" />
            <button type="submit" class="btn btn-primary">Search</button>
        </form>
    </div>

    <div class="bloc">
        @if (searchResultCategory != null)
        {
	        <div>
		        <p></p>
		        <h6>Search Result:</h6>
		        <p>@searchResultCategory.Name</p>
	        </div>
        }
        else if (searchAttempted)
        {
	        <div>
		        <p></p>
		        <h6>Search Result:</h6>
		        <p>Category not found.</p>
	        </div>
        }
    </div>

    <div class="bloc">
    <div class="card" style="width: 100%;">
        <ul class="list-group list-group-flush">
	        @if (categories == null)
            {
                <li class="list-group-item">Loading...</li>
            }
            else
            {
                @foreach (var category in categories)
                {
                    <li class="list-group-item">
                        <a href="/categories/@category.Id" class="badge badge-primary">@category.Id - @category.Name</a>
							<button @onclick="() => StartEdit(category)" class="btn btn-primary">Edit</button>
                            <button @onclick="() => DeleteCategory(category.Id)" class="btn btn-danger">Delete</button>
                        
                    </li>
                }
            }
        </ul>
    </div>
    </div>

    <div class="bloc">
        @if (editCategory != null)
        {
            <h5>Edit Category</h5>
            <form @onsubmit="UpdateCategory">
                <input type="hidden" class="form-group" @bind="editCategory.Id" />
                <input type="text" class="form-group" @bind="editCategory.Name" />
                <button type="submit" class="btn btn-success">Save</button>
                <button @onclick="CancelEdit" class="btn btn-primary">Cancel</button>
            </form>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

    <div class="bloc">
    <h5>Add a New Category</h5> 
    <form @onsubmit="AddCategory">
        <input type="number" class="form-group" @bind="newCategoryId" placeholder="Category ID" />
        <input type="text" @bind="newCategoryName" placeholder="Category Name" />
        <button type="submit" class="btn btn-success">Add</button>
    </form>
    </div>

</div>
<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(1, 1fr); /* Two equal columns */
        gap: 20px; /* Gap between columns */
    }

    .bloc {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .card{
        color: black;
    }

    .badge {
        color: #fff !important; /* Ensuring text is white */
        background-color: #007bff !important; /* Ensuring background color is primary */
    }

    .list-group-item a {
        text-decoration: none;
        color: white; /* Text color for badge links */
        /* font-size: 10px; */
    }

    .list-group-item button{
        float: right; /* Align buttons to the right */
        margin-left: 10px; /* Add margin between buttons if needed */
    }
</style>

@code {
    List<Category> categories /*= new List<Category>
	{
		new Category { Id=1, Name="Food" },
		new Category { Id=2, Name="House" },
		new Category { Id=3, Name="Entertainment" }
	}*/;
    private int newCategoryId;
    private string newCategoryName;
    private Category editCategory;
    private int searchCategoryId;
    private Category searchResultCategory;
    private bool searchAttempted;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        categories = await Service.GetAllCategoriesAsync();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategory = new Category { Id = newCategoryId, Name = newCategoryName };
            newCategory = await Service.AddCategoryAsync(newCategory);
            categories.Add(newCategory);

            newCategoryId = 0; // Clear the input field
            newCategoryName = string.Empty; // Clear the input field
        }
    }

    private async Task DeleteCategory(int id)
    {
        await Service.DeleteCategoryAsync(id);
        var category = categories.FirstOrDefault(c => c.Id == id);
        if (category != null)
        {
            categories.Remove(category);
        }
    }
    private void StartEdit(Category category)
    {
        editCategory = new Category { Id = category.Id, Name = category.Name };
    }

    private async Task UpdateCategory()
    {
        try
        {
            if (editCategory != null)
            {
                var categoryToUpdate = await Service.GetCategoryByIdAsync(editCategory.Id);
                if (categoryToUpdate != null)
                {
                    categoryToUpdate.Name = editCategory.Name;
                    await Service.UpdateCategoryAsync(categoryToUpdate);

                    var existingCategory = categories.FirstOrDefault(c => c.Id == editCategory.Id);
                    if (existingCategory != null)
                    {
                        existingCategory.Name = editCategory.Name;
                        editCategory = null; // Clear edit mode
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            Console.Error.WriteLine(errorMessage);
        }
    }

    private void CancelEdit()
    {
        editCategory = null; // Clear edit mode
    }

    private async Task SearchCategory()
    {
        searchResultCategory = await Service.GetCategoryByIdAsync(searchCategoryId);
        searchAttempted = true;
    }
    private string GetInnermostExceptionMessage(Exception ex)
    {
        while (ex.InnerException != null) ex = ex.InnerException;
        return ex.Message;
    }
}
