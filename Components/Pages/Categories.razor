@page "/categories"
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject CategoryService Service;
@rendermode InteractiveServer

<PageTitle>Categories</PageTitle>
<h3>Categories</h3>

<h5>Search Category by ID</h5>
<form @onsubmit="SearchCategory">
    <input type="number" class="form-group" @bind="searchCategoryId" placeholder="Category ID" />
    <button type="submit" class="btn btn-primary">Search</button>
</form>

<div class="card" style="width: 18rem;">
    <ul class="list-group list-group-flush">
	    @if (categories == null)
        {
            <li class="list-group-item">Loading...</li>
        }
        else
        {
            @foreach (var category in categories)
            {
                <li class="list-group-item">
                    <a href="/categories/@category.Id" class="badge badge-primary">@category.Id - @category.Name</a>
                    <button @onclick="() => DeleteCategory(category.Id)" class="btn btn-primary">Delete</button>
                    <button @onclick="() => StartEdit(category)" class="btn btn-primary">Edit</button>
                </li>
            }
        }
    </ul>
</div>

@if (editCategory != null)
{
    <h5>Edit Category</h5>
    <form @onsubmit="UpdateCategory">
        <input type="hidden" class="form-group" @bind="editCategory.Id" />
        <input type="text" @bind="editCategory.Name" />
        <button type="submit" class="btn btn-primary">Save</button>
        <button @onclick="CancelEdit" class="btn btn-primary">Cancel</button>
    </form>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

<p></p>
<h5>Add a New Category</h5> 
<form @onsubmit="AddCategory">
    <input type="number" class="form-group" @bind="newCategoryId" placeholder="Category ID" />
    <input type="text" @bind="newCategoryName" placeholder="Category Name" />
    <button type="submit" class="btn btn-primary">Add</button>
</form>


@if (searchResultCategory != null)
{
    <div>
        <p></p>
        <h6>Search Result:</h6>
        <p>@searchResultCategory.Name</p>
    </div>
}
else if (searchAttempted)
{
    <div>
        <p></p>
        <h6>Search Result:</h6>
        <p>Category not found.</p>
    </div>
}

@code {
    List<Category> categories /*= new List<Category>
	{
		new Category { Id=1, Name="Food" },
		new Category { Id=2, Name="House" },
		new Category { Id=3, Name="Entertainment" }
	}*/;
    private int newCategoryId;
    private string newCategoryName;
    private Category editCategory;
    private int searchCategoryId;
    private Category searchResultCategory;
    private bool searchAttempted;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        categories = await Service.GetAllCategoriesAsync();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategory = new Category { Id = newCategoryId, Name = newCategoryName };
            newCategory = await Service.AddCategoryAsync(newCategory);
            categories.Add(newCategory);

            newCategoryId = 0; // Clear the input field
            newCategoryName = string.Empty; // Clear the input field
        }
    }

    private async Task DeleteCategory(int id)
    {
        await Service.DeleteCategoryAsync(id);
        var category = categories.FirstOrDefault(c => c.Id == id);
        if (category != null)
        {
            categories.Remove(category);
        }
    }
    private void StartEdit(Category category)
    {
        editCategory = new Category { Id = category.Id, Name = category.Name };
    }

    private async Task UpdateCategory()
    {
        try
        {
            if (editCategory != null)
            {
                var categoryToUpdate = await Service.GetCategoryByIdAsync(editCategory.Id);
                if (categoryToUpdate != null)
                {
                    categoryToUpdate.Name = editCategory.Name;
                    await Service.UpdateCategoryAsync(categoryToUpdate);

                    var existingCategory = categories.FirstOrDefault(c => c.Id == editCategory.Id);
                    if (existingCategory != null)
                    {
                        existingCategory.Name = editCategory.Name;
                        editCategory = null; // Clear edit mode
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            Console.Error.WriteLine(errorMessage);
        }
    }

    private void CancelEdit()
    {
        editCategory = null; // Clear edit mode
    }

    private async Task SearchCategory()
    {
        searchResultCategory = await Service.GetCategoryByIdAsync(searchCategoryId);
        searchAttempted = true;
    }
    private string GetInnermostExceptionMessage(Exception ex)
    {
        while (ex.InnerException != null) ex = ex.InnerException;
        return ex.Message;
    }
}
