@page "/expenses"
@rendermode InteractiveServer
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@using ExpenseTracker.Components; <!-- ExpensesList e aici -->
@inject ExpenseService ExpenseService;
@inject CategoryService CategoryService;
@inject NavigationManager NavigationManager;

<PageTitle>Expenses</PageTitle>
<h3>Expenses</h3>

@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Loaded @expenses.Count expenses.</p> <!-- Debugging line: ajunge aici -->
    <ExpensesList expenses="expenses" 
        onEditExpense="EditExpense" 
        onDeleteExpense="DeleteExpense" />
}
<button @onclick="NavigateToAddExpense">Add Expense</button>

@* <p>Expenses data: @System.Text.Json.JsonSerializer.Serialize(expenses)</p> <!-- Debugging line: se populeaza expenes cu ce trebe -->
 *@
@code {
    private List<Expense> expenses;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            expenses = await ExpenseService.GetAllExpensesAsync();
            // foreach (var expense in expenses)
            // {
            //     expense.Category = await CategoryService.GetCategoryByIdAsync(expense.CategoryId);
            // }
            Console.WriteLine($"Loaded {expenses.Count} expenses."); // Debugging line
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            Console.Error.WriteLine(errorMessage);
        }
    }

    private void EditExpense(int id)
    {
        try
        {
        NavigationManager.NavigateTo($"/expenses/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            Console.Error.WriteLine(errorMessage);
        }
    }

    private async Task DeleteExpense(int id)
    {
        try
        {
        await ExpenseService.DeleteExpenseAsync(id);
        expenses = await ExpenseService.GetAllExpensesAsync();
        foreach (var expense in expenses)
        {
            expense.Category = await CategoryService.GetCategoryByIdAsync(expense.CategoryId);
        }
        }
        catch (Exception ex)
        {
            errorMessage = GetInnermostExceptionMessage(ex);
            Console.Error.WriteLine(errorMessage);
        }
    }

    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/expenses/new");
    }

    private string GetInnermostExceptionMessage(Exception ex)
    {
        while (ex.InnerException != null) ex = ex.InnerException;
        return ex.Message;
    }
}
