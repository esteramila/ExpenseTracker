@page "/categories/{categoryId:int}"
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject ExpenseService ExpenseService;
@inject CategoryService CategoryService

<PageTitle>Category @categoryId</PageTitle>
<h3>Expenses for Category @category?.Name</h3>

@if (category?.Expenses == null)
{
	<p>Loading...</p>
}
else if (category?.Expenses.Count == 0)
{
	<p>No expenses found for this category.</p>
}
else
{
	<ExpensesList expenses="category?.Expenses" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
	<p class="text-danger">@errorMessage</p>
}

@code {
	[Parameter]
	public int categoryId { get; set; }
	private Category category;
	// private List<Expense> expenses;
	private string errorMessage;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// expenses = await ExpenseService.GetAllExpensesAsync();
			category = await CategoryService.GetCategoryByIdAsync(categoryId); // asta aduce si expenses

			// expenses = await ExpenseService.GetExpensesByCategoryIdAsync(categoryId); // nu mai e nevoie
		}
		catch (Exception ex)
		{
			errorMessage = GetInnermostExceptionMessage(ex);
			// Log the error message or show it in the UI
			Console.Error.WriteLine(errorMessage);
		}
	}

	private string GetInnermostExceptionMessage(Exception ex)
	{
		while (ex.InnerException != null) ex = ex.InnerException;
		return ex.Message;
	}
}
