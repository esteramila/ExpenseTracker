@page "/"
@page "/home"
@rendermode InteractiveServer
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject IncomeService IncomeService
@inject ExpenseService ExpenseService
@inject CategoryService CategoryService;

<PageTitle>HomeExpense Tracker</PageTitle>
<h1>Expense Tracker</h1>
<p>Welcome to your new expense tracking app!</p>

@* <Counter IncrementAmount="10" />

<p>Why doesn't it write what i write? gata merge</p>
<input @onchange="InputChanged" />
<p>@message</p>

<p>Why won't it clear the text area? gata merge</p>
<input @bind="text" />
<button @onclick="() => text = string.Empty">Clear</button>
<p>@text</p> *@

<div class="grid-container">
    <div class="balance">
		<h4>Balance</h4>
		<p class="@GetBalanceColorClass()">@balance.ToString("0.00") RON</p>
    </div>
    <div class="highest_expenses bg-danger text-white">
        <h4>Highest Expense</h4>
        <p>@highestExpenseCategoryName</p>
    </div>
    <div class="incomes bg-success text-white">
        <h4>Incomes</h4>
        <p class="dates"> @startDateIncomes.ToShortDateString() - @endDateIncomes.ToShortDateString()</p>
        <p>@resultIncomes RON</p>
        <h5 class="dates">Current Month</h5>
        <p>@resultIncomesMonth.ToString("0.00") RON</p>
    </div>
    <div class="expenses bg-primary text-white">
        <h4>Expenses</h4>
        <p class="dates"> @startDateExpenses.ToShortDateString() - @endDateExpenses.ToShortDateString()</p>
        <p>@resultExpenses RON</p>
        <h5 class="dates">Current Month</h5>
        <p>@resultExpensesMonth.ToString("0.00") RON</p>
    </div>
    <div class="trueExpenses bg-secondary text-white">
        <h4>Planned Expenses</h4>
        <p class="dates"> @startDateExpenses.ToShortDateString() - @endDateExpenses.ToShortDateString()</p>
        <p>@resultPlannedExpenses.ToString("0.00") RON</p>
    </div>
    <div class="falseExpenses bg-secondary text-white">
        <h4>Unplanned Expenses</h4>
        <p class="dates"> @startDateExpenses.ToShortDateString() - @endDateExpenses.ToShortDateString()</p>
        <p>@resultUnplannedExpenses.ToString("0.00") RON</p>
    </div>
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Two equal columns */
        gap: 20px; /* Gap between columns */
    }

    .balance, .highest_expenses, .incomes, .expenses, .trueExpenses, .falseExpenses {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

        .expenses.bg-primary {
            background-color: var(--bs-primary) !important;
        }

        .incomes.bg-success {
            background-color: var(--bs-success) !important;
		}

		.highest_expenses.bg-primary{
            background-color: var(--bs-danger) !important;
        }

        .trueExpenses.bg-secondary, .falseExpenses.bg-secondary {
            background-color: var(--bs-secondary) !important;
        }

    .text-white {
        color: white !important;
    }
    .dates{
        color:lightgray;
    }
</style>

@code {
    /* string message = "";

    void InputChanged(ChangeEventArgs e)
        {
        message = (string)e.Value;
    }
    string text = ""; */
    private IEnumerable<Income> incomes;
    private float resultIncomes;
    private DateTime startDateIncomes;
    private DateTime endDateIncomes;
    private float resultIncomesMonth;

    private IEnumerable<Expense> expenses;
    private float resultExpenses;
    private DateTime startDateExpenses;
    private DateTime endDateExpenses;
    private float resultExpensesMonth;

    private float balance;
    private float resultPlannedExpenses;
    private float resultUnplannedExpenses;

    private string highestExpenseCategoryName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var incomes = await IncomeService.GetAllIncomesAsync();
            if (incomes.Any())
            {
                startDateIncomes = await IncomeService.GetEarliestIncomeDateAsync();
                endDateIncomes = await IncomeService.GetLatestIncomeDateAsync();
                resultIncomes = incomes.Sum(income => income.Amount);
            }
            resultIncomesMonth = await IncomeService.GetCurrentMonthIncomeSumAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading incomes: {ex.Message}");
        }

        try
        {
            var expenses = await ExpenseService.GetAllExpensesAsync();
            if (expenses.Any())
            {
                startDateExpenses = await ExpenseService.GetEarliestExpenseDateAsync();
                endDateExpenses = await ExpenseService.GetLatestExpenseDateAsync();
                resultExpenses = expenses.Sum(expense => expense.Amount);

                // Planned/Unplanned
                resultPlannedExpenses = expenses
                    .Where(expense => expense.Planned)
                    .Sum(expense => expense.Amount);
                resultUnplannedExpenses = expenses
                    .Where(expense => !expense.Planned)
                    .Sum(expense => expense.Amount);

                // Category with highest expenses
                var groupedExpenses = expenses.GroupBy(expense => expense.CategoryId)
                                              .Select(group => new { CategoryId = group.Key, TotalAmount = group.Sum(expense => expense.Amount) })
                                              .OrderByDescending(x => x.TotalAmount)
                                              .FirstOrDefault();

                if (groupedExpenses != null)
                {
                    var category = await CategoryService.GetCategoryByIdAsync(groupedExpenses.CategoryId);
                    highestExpenseCategoryName = category.Name;
                }
            }
            resultExpensesMonth = await ExpenseService.GetCurrentMonthExpenseSumAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading incomes: {ex.Message}");
        }

        balance = resultIncomes - resultExpenses;
    }

    // Method to determine CSS class based on balance value
    private string GetBalanceColorClass()
    {
        if (balance > 0)
        {
            return "text-success"; // Use Bootstrap or your CSS framework class for green
        }
        else if (balance < 0)
        {
            return "text-danger"; // Use Bootstrap or your CSS framework class for red
        }
        else
        {
            return ""; // No special class if balance is zero
        }
    }
}